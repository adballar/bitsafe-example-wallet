/* This file is licensed as described by the file LICENCE. */

package io.bitsafe.examplewallet.gui;

import com.google.bitcoin.core.AddressFormatException;
import com.google.bitcoin.core.InsufficientMoneyException;
import com.google.bitcoin.core.Utils;
import com.google.bitcoin.store.UnreadableWalletException;
import io.bitsafe.examplewallet.bitcoin.BitcoinJInterface;
import io.bitsafe.examplewallet.bitcoin.WalletBalanceObserver;
import io.bitsafe.examplewallet.dev.Address;
import io.bitsafe.examplewallet.dev.BitSafeDevice;
import io.bitsafe.examplewallet.dev.PasswordSupplier;
import io.bitsafe.examplewallet.dev.Session;
import io.bitsafe.examplewallet.dev.Wallet;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.util.Iterator;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.locks.ReentrantLock;

/**
 *
 * @author Chris Chua
 */
public class MainFrame extends javax.swing.JFrame
        implements Console, WalletBalanceObserver, PasswordSupplier {

    /** Directory where data files (eg. blockchain store, wallets) will go. */
    public static String DATA_DIR = ".";
    /** Prefix of data filenames. */
    public static String FILE_PREFIX = "example-wallet-testnet";

    private BitSafeDevice bitsafe;
    private final ReentrantLock consoleLock;
    private final BitcoinJInterface bitcoinj;
    private Session bitsafeSession;
    private Wallet currentBitSafeWallet;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        addWindowListener(new WindowAdapter()
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                onClose();
            }
        });
        try {
            bitsafe = new BitSafeDevice(this);
        } catch (IOException e) {
            console.append(e.toString() + "\n");
        }
        consoleLock = new ReentrantLock();
        //bitcoinj = null;
        bitcoinj = new BitcoinJInterface(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
        bitcoinj.setObserver(this);
    }

    public void onClose() {
        if (bitsafeSession != null) {
            bitsafeSession.initialize();
        }
        bitsafe.disconnect();
        if (currentBitSafeWallet != null) {
            currentBitSafeWallet.saveToFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
            if (bitcoinj != null) {
                try {
                    bitcoinj.saveWallet(currentBitSafeWallet.getWalletNumber());
                } catch (IOException e) {
                    log(e);
                }
            }
        }
        if (bitcoinj != null) {
            bitcoinj.stopAndWait();
        }
        System.exit(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        balance = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        receiveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        allowUnconfirmedSpend = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemDevConnect = new javax.swing.JMenuItem();
        jMenuItemDevDisconnect = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemCreate = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemLoad = new javax.swing.JMenuItem();
        jMenuItemUnload = new javax.swing.JMenuItem();
        jMenuItemListWallets = new javax.swing.JMenuItem();
        jMenuItemListAddresses = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("BitSafe example wallet application");

        balance.setEditable(false);
        balance.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        balance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        balance.setText("Balance: 0.00 BTC");
        balance.setName(""); // NOI18N

        sendButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        receiveButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        receiveButton.setText("Receive");
        receiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveButtonActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        allowUnconfirmedSpend.setText("Allow unconfirmed spends");

        jMenu1.setText("File");

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Device");

        jMenuItemDevConnect.setText("Connect");
        jMenuItemDevConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDevConnectActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemDevConnect);

        jMenuItemDevDisconnect.setText("Disconnect");
        jMenuItemDevDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDevDisconnectActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemDevDisconnect);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Wallets");

        jMenuItemCreate.setText("Create");
        jMenuItemCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCreateActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemCreate);

        jMenuItemDelete.setText("Delete");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemDelete);

        jMenuItemLoad.setText("Load");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLoadActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemLoad);

        jMenuItemUnload.setText("Unload");
        jMenuItemUnload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUnloadActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemUnload);

        jMenuItemListWallets.setText("List wallets");
        jMenuItemListWallets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListWalletsActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemListWallets);

        jMenuItemListAddresses.setText("List addresses");
        jMenuItemListAddresses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemListAddressesActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemListAddresses);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allowUnconfirmedSpend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addComponent(receiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(balance))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(receiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(allowUnconfirmedSpend))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        onClose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        SendDialog dialog = new SendDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SendDialog.RET_OK) {
            try {
                bitcoinj.sendMulti(dialog.getSendRecipients(), allowUnconfirmedSpend.isSelected(), currentBitSafeWallet);
                currentBitSafeWallet.saveToFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
                bitcoinj.saveWallet(currentBitSafeWallet.getWalletNumber());
            } catch (ArithmeticException | NumberFormatException | AddressFormatException
                    | InsufficientMoneyException | InterruptedException | ExecutionException
                    | IOException e) {
                log(e);
            }
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void jMenuItemDevConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDevConnectActionPerformed
        bitsafe.connect();
        bitsafeSession = new Session(bitsafe, this);
        bitsafeSession.initialize();
    }//GEN-LAST:event_jMenuItemDevConnectActionPerformed

    private void jMenuItemDevDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDevDisconnectActionPerformed
        bitsafe.disconnect();
    }//GEN-LAST:event_jMenuItemDevDisconnectActionPerformed

    private void receiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveButtonActionPerformed
        String newAddress = bitcoinj.generateAddress();
        if (newAddress != null) {
            currentBitSafeWallet.saveToFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
            try {
                bitcoinj.saveWallet(currentBitSafeWallet.getWalletNumber());
            } catch (IOException e) {
                log(e);
            }
            log("New address: " + newAddress + "\n");
        }
    }//GEN-LAST:event_receiveButtonActionPerformed

    private void jMenuItemListWalletsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListWalletsActionPerformed
        bitsafeSession.listWallets();
    }//GEN-LAST:event_jMenuItemListWalletsActionPerformed

    private void jMenuItemUnloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUnloadActionPerformed
        bitsafeSession.initialize();
        if (bitcoinj != null) {
            bitcoinj.setAddressGenerator(bitcoinj);
            if (currentBitSafeWallet != null) {
                try {
                    bitcoinj.saveWallet(currentBitSafeWallet.getWalletNumber());
                } catch (IOException e) {
                    log(e);
                }
            }
        }
        if (currentBitSafeWallet != null) {
            currentBitSafeWallet.saveToFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
            currentBitSafeWallet = null;
        }
    }//GEN-LAST:event_jMenuItemUnloadActionPerformed

    private void jMenuItemLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLoadActionPerformed
        WalletNumberDialog dialog = new WalletNumberDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SendDialog.RET_OK) {
            try {
                Wallet w = bitsafeSession.loadWallet(dialog.getWalletNumber(), this);
                if (w != null) {
                    log("Loaded wallet " + dialog.getWalletNumber() + "\n");
                    onLoadWallet(w);
                }
            } catch (NumberFormatException e) {
                log(e);
            }
        }
    }//GEN-LAST:event_jMenuItemLoadActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        WalletNumberDialog dialog = new WalletNumberDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SendDialog.RET_OK) {
            try {
                bitsafeSession.deleteWallet(dialog.getWalletNumber(), this);
                File f = Wallet.getWalletFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX, dialog.getWalletNumber());
                f.delete();
                if (bitcoinj != null) {
                    bitcoinj.deleteWallet(dialog.getWalletNumber());
                }
            } catch (NumberFormatException e) {
                log(e);
            }
        }
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void jMenuItemCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCreateActionPerformed
        CreateWalletDialog dialog = new CreateWalletDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SendDialog.RET_OK) {
            try {
                if (dialog.getEncrypted()) {
                    if (!dialog.getEnteredPassword().equals(dialog.getReEnteredPassword())) {
                        throw new PasswordMismatchException("Passwords don't match");
                    }
                }
                Wallet w = bitsafeSession.createWallet(
                        dialog.getWalletNumber(),
                        dialog.getWalletName(),
                        dialog.getEncrypted(),
                        dialog.getEnteredPassword());
                if (w != null) {
                    log("Created wallet " + dialog.getWalletNumber() + "\n");
                    onLoadWallet(w);
                }
            } catch (NumberFormatException | PasswordMismatchException e) {
                log(e);
            }
        }
    }//GEN-LAST:event_jMenuItemCreateActionPerformed

    private void jMenuItemListAddressesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemListAddressesActionPerformed
        if (currentBitSafeWallet != null) {
            Iterator<Address> iterator = currentBitSafeWallet.getAddresses().iterator();
            int index = 1;
            while (iterator.hasNext()) {
                Address a = iterator.next();
                log(Integer.toString(index++) + ": ");
                log(a.toECKey().toAddress(bitcoinj.params()).toString());
                log("\n");
            }
        }
    }//GEN-LAST:event_jMenuItemListAddressesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowUnconfirmedSpend;
    private javax.swing.JTextField balance;
    private javax.swing.JTextArea console;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemCreate;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemDevConnect;
    private javax.swing.JMenuItem jMenuItemDevDisconnect;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemListAddresses;
    private javax.swing.JMenuItem jMenuItemListWallets;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemUnload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton receiveButton;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void log(String text) {
        consoleLock.lock();
        try {
            console.append(text);
        } finally {
            consoleLock.unlock();
        }
    }

    @Override
    public void log(Exception e) {
        log(e.toString() + "\n");
    }

    @Override
    public void balanceChanged(BigInteger confirmed, BigInteger unconfirmed) {
        String s = "Balance: ";
        s += Utils.bitcoinValueToFriendlyString(confirmed);
        if (unconfirmed.compareTo(BigInteger.ZERO) > 0) {
            s = s + " (+ " + Utils.bitcoinValueToFriendlyString(unconfirmed) + ")";
        }
        s += " BTC";
        balance.setText(s);
    }

    @Override
    public byte[] getPassword() {
        PasswordDialog dialog = new PasswordDialog(this, true);
        dialog.setVisible(true);
        if (dialog.getReturnStatus() == SendDialog.RET_OK) {
            return dialog.getPassword().getBytes(Charset.forName("UTF-8"));
        } else {
            return null;
        }
    }

    private void onLoadWallet(Wallet w) {
        currentBitSafeWallet = w;
        w.loadFromFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
        if (bitcoinj != null) {
            try {
                bitcoinj.loadWallet(w.getWalletNumber());
            } catch (IOException | UnreadableWalletException e) {
                log(e);
            }
            w.sync(bitcoinj.wallet());
            bitcoinj.setAddressGenerator(w);
        }
        w.saveToFile(MainFrame.DATA_DIR, MainFrame.FILE_PREFIX);
    }

}
